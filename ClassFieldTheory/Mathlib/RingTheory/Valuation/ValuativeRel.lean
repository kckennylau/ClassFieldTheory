import ClassFieldTheory.Mathlib.RingTheory.Valuation.Basic
import Mathlib.RingTheory.Valuation.ValuativeRel

namespace ValuativeRel

section Ring

variable {R : Type*} [CommRing R]

-- TODO: when PR, tag `ValuativeRel` as `@[ext]` instead of this.
@[ext] theorem ext {v v' : ValuativeRel R}
    (h : ‚àÄ a b, v.rel a b ‚Üî v'.rel a b) : v = v' := by
  cases v; cases v'; congr; ext; apply h

variable [ValuativeRel R]

theorem posSubmonoid.ne_zero (x : posSubmonoid R) : x.val ‚â† 0 :=
  mt (¬∑ ‚ñ∏ rel_rfl) x.2

end Ring


section Field

variable {F : Type*} [Field F] [ValuativeRel F]

theorem rel_iff_div_rel_one (x : F) {y : F} (hy : y ‚â† 0) :
    x ‚â§·µ• y ‚Üî x / y ‚â§·µ• 1 := by
  rw [Valuation.Compatible.rel_iff_le (v := ValuativeRel.valuation F),
    Valuation.Compatible.rel_iff_le (v := ValuativeRel.valuation F),
    map_div‚ÇÄ, map_one, div_le_one‚ÇÄ (bot_lt_iff_ne_bot.2 ((map_ne_zero _).2 hy))]

theorem rel_zero_iff (x : F) : x ‚â§·µ• 0 ‚Üî x = 0 := by
  rw [Valuation.Compatible.rel_iff_le (v := valuation F), map_zero, le_zero_iff, map_eq_zero]

/-- Two valuative relations on a field are equal iff their rings of integers are equal. -/
@[ext high] theorem ext_of_field {F : Type*} [Field F] {v v' : ValuativeRel F}
    (h : ‚àÄ x, v.rel x 1 ‚Üî v'.rel x 1) : v = v' := by
  ext x y
  by_cases hy : y = 0
  ¬∑ simp_rw [hy, rel_zero_iff]
  ¬∑ rw [rel_iff_div_rel_one _ hy, @rel_iff_div_rel_one _ _ v x y hy, h]

theorem valuation_surjective' : Function.Surjective (valuation F) :=
  fun Œ≥ ‚Ü¶ let ‚ü®x, y, hxy‚ü© := valuation_surjective Œ≥; ‚ü®x / y.val, by rw [map_div‚ÇÄ, hxy]‚ü©

theorem unitsMap_valuation_surjective :
    Function.Surjective (Units.map (valuation F : F ‚Üí* ValueGroupWithZero F)) :=
  fun Œ≥ ‚Ü¶ let ‚ü®x, hx‚ü© := valuation_surjective' Œ≥.val
  ‚ü®Units.mk0 x (mt (by rw [‚Üê hx, ¬∑, map_zero]) Œ≥.ne_zero),
    Units.ext <| by simpa using hx‚ü©

end Field

end ValuativeRel


namespace ValuativeExtension

open ValuativeRel

variable {A B : Type*} [CommRing A] [CommRing B] [ValuativeRel A] [ValuativeRel B]
  [Algebra A B] [ValuativeExtension A B] {a b : A}

lemma algebraMap_le : valuation B (algebraMap A B a) ‚â§ valuation B (algebraMap A B b) ‚Üî
    valuation A a ‚â§ valuation A b := by
  simp_rw [‚Üê Valuation.Compatible.rel_iff_le, rel_iff_rel]

lemma algebraMap_eq : valuation B (algebraMap A B a) = valuation B (algebraMap A B b) ‚Üî
    valuation A a = valuation A b := by
  simp_rw [le_antisymm_iff, algebraMap_le]

lemma algebraMap_lt : valuation B (algebraMap A B a) < valuation B (algebraMap A B b) ‚Üî
    valuation A a < valuation A b := by
  simp_rw [lt_iff_le_not_ge, algebraMap_le]

end ValuativeExtension


namespace ValuativeTopology

open Topology ValuativeRel

theorem mk_replace {R : Type*} [CommRing R] [ValuativeRel R] [TopologicalSpace R]
    (h : ‚àÄ s : Set R, s ‚àà ùìù (0 : R) ‚Üî ‚àÉ Œ≥ : (ValueGroupWithZero R)À£, (valuation R).ball Œ≥ ‚äÜ s) :
    ValuativeTopology R where
  mem_nhds_iff := h

theorem mk' {F : Type*} [Field F] [ValuativeRel F] [TopologicalSpace F]
    {Œì‚ÇÄ : Type*} [LinearOrderedCommMonoidWithZero Œì‚ÇÄ] (v : Valuation F Œì‚ÇÄ) [v.Compatible]
    (h : ‚àÄ s : Set F, s ‚àà ùìù (0 : F) ‚Üî ‚àÉ x : F, x ‚â† 0 ‚àß v.ball (v x) ‚äÜ s) :
    ValuativeTopology F :=
  mk_replace fun s ‚Ü¶ by
    rw [h s, Function.Surjective.exists (unitsMap_valuation_surjective)]
    simp_rw [(isEquiv v (valuation F)).ball_eq_ball]
    exact ‚ü®fun ‚ü®x, hx0, hx‚ü© ‚Ü¶ ‚ü®Units.mk0 x hx0, hx‚ü©, fun ‚ü®x, hx‚ü© ‚Ü¶ ‚ü®x.val, x.ne_zero, hx‚ü©‚ü©

end ValuativeTopology
