import Mathlib
import ClassFieldTheory.GroupCohomology._1_Basic
import ClassFieldTheory.GroupCohomology._2_restriction

/-
In this file we have a group homomorphism `œÜ : G ‚Üí* Q` satisfying the condition

  `surj : Function.Surjective œÜ`.

From this, we define a functor

  `Rep.quotientToInvariantsFunctor' surj : Rep R G ‚•§ Rep R Q`,

which takes a representation `M` of `G` to the subspace of vectors which are fixed by `œÜ.ker`,
with the obvious action of `Q`.

We use the abbreviation `M ‚Üë surj` for `(Rep.quotientToInvariantsFunctor' surj).obj M`.

We define the natural map of `G`-representations

  `((M ‚Üë surj) ‚Üì œÜ) ‚ü∂ M`.

Using this map, we define the inflation map as a morphism of functors

  `groupCohomology.cochain_infl : quotientToInvariantsFunctor' surj ‚ãô cochainsFunctor R Q ‚ü∂ cochainsFunctor R G`.

Using this we define the inflation map on group cohomology:

  `infl (n : ‚Ñï) : Rep.quotientToInvariantsFunctor' surj ‚ãô functor R Q n ‚ü∂ functor R G n`

Since this is defined on cochains first, we are able to deduce `Œ¥`-naturality of the inflation map
on cohomology.
-/

open CategoryTheory
  ConcreteCategory
  Limits
  Rep
  groupCohomology
  HomologicalComplex

variable {R G : Type} [CommRing R] [Group G] --[DecidableEq G]

variable {Q : Type} [Group Q] {œÜ : G ‚Üí* Q} (surj : Function.Surjective œÜ) -- [DecidableEq H]

namespace Rep
@[simps] noncomputable def quotientToInvariantsFunctor' :
    Rep R G ‚•§ Rep R Q where
  obj M := M.quotientToInvariants œÜ.ker ‚Üì (QuotientGroup.quotientKerEquivOfSurjective œÜ surj).symm
  map f := ofHom {
    val := LinearMap.restrict (ModuleCat.Hom.hom f.hom) (by
      intro x hx g
      specialize hx g
      simp only [MonoidHom.coe_comp, Subgroup.coe_subtype, Function.comp_apply] at hx ‚ä¢
      rw [‚ÜêRep.œÅ_hom, ‚ÜêLinearMap.comp_apply, ‚ÜêModuleCat.hom_comp, ‚Üêf.comm,
        ModuleCat.hom_comp, LinearMap.comp_apply, Rep.œÅ_hom, hx])
    property h := by
      rename_i X Y
      ext ‚ü®x,hx‚ü©
      rw [Function.comp_apply, Function.comp_apply]
      apply Subtype.ext
      change (ModuleCat.Hom.hom f.hom  ‚àò‚Çó X.œÅ _) _ = ((Y.œÅ _) ‚àò‚Çó (ModuleCat.Hom.hom f.hom)) _
      rw [‚ÜêRep.œÅ_hom, ‚ÜêRep.œÅ_hom, ‚ÜêModuleCat.hom_comp, ‚ÜêModuleCat.hom_comp, f.comm]
  }
  map_id _ := rfl
  map_comp _ _ := rfl

lemma quotientToInvariantsFunctor'_obj_œÅ (M : Rep R G) :
    ((quotientToInvariantsFunctor' surj).obj M).œÅ =
    (M.quotientToInvariants œÜ.ker).œÅ.comp ((QuotientGroup.quotientKerEquivOfSurjective œÜ surj).symm)
    := rfl

lemma quotientToInvariantsFunctor'_obj_œÅ_apply (M : Rep R G) (g : G) :
    ((quotientToInvariantsFunctor' surj).obj M).œÅ (œÜ g) =
    (M.quotientToInvariants œÜ.ker).œÅ g
    := by
  rw [quotientToInvariantsFunctor'_obj_œÅ]
  simp only [quotientToInvariantsFunctor'_obj, Action.res_obj_V, of_œÅ, MonoidHom.coe_comp,
    MonoidHom.coe_coe, Function.comp_apply]
  congr
  rw [MulEquiv.symm_apply_eq]
  rfl

lemma quotientToInvariantsFunctor'_obj_œÅ_apply‚ÇÇ (M : Rep R G) (g : G)
    (v : (quotientToInvariantsFunctor' surj).obj M) :
    (((quotientToInvariantsFunctor' surj).obj M).œÅ (œÜ g) v).val =
    M.œÅ g v.val
    := by
  rw [quotientToInvariantsFunctor'_obj_œÅ_apply]
  rfl

instance : (quotientToInvariantsFunctor' (R := R) surj).PreservesZeroMorphisms where
  map_zero _ _ := rfl

set_option quotPrecheck false in
/--
`M ‚Üë H` means the `H` invariants of `M`, as a representation of `G ‚ß∏ H`.
-/
notation M " ‚Üë " surj => (Rep.quotientToInvariantsFunctor' surj).obj M

noncomputable def res_quotientToInvariantsFunctor'_Œπ (M : Rep R G) :
    ((M ‚Üë surj) ‚Üì œÜ) ‚ü∂ M where
  hom := ofHom (Submodule.subtype _)
  comm g := by
    ext m
    simp only [quotientToInvariantsFunctor'_obj, Action.res_obj_V, Action.res_obj_œÅ,
      RingHom.toMonoidHom_eq_coe, RingEquiv.toRingHom_eq_coe, MonoidHom.coe_comp, MonoidHom.coe_coe,
      RingHom.coe_coe, Function.comp_apply, ModuleCat.hom_comp, ModuleCat.hom_ofHom,
      LinearMap.coe_comp, Submodule.coe_subtype, œÅ_hom]
    rw [‚ÜêRep.quotientToInvariantsFunctor'_obj_œÅ_apply‚ÇÇ surj M]
    rfl

end Rep
namespace groupCohomology

noncomputable def cochain_infl :
    quotientToInvariantsFunctor' surj ‚ãô cochainsFunctor R Q ‚ü∂ cochainsFunctor R G where
  app M := cochainsMap œÜ <| res_quotientToInvariantsFunctor'_Œπ surj M
  naturality _ _ _ := rfl

/--
The inflation map `H‚Åø(G‚ß∏H, M ‚Üë H) ‚ü∂ H‚Åø(G,M)` as a natural transformation.
This is defined using the inflation map on cocycles.
-/
noncomputable def infl (n : ‚Ñï) :
    Rep.quotientToInvariantsFunctor' surj ‚ãô functor R Q n ‚ü∂ functor R G n :=
  (groupCohomology.cochain_infl surj) ‚ó´ ùüô (homologyFunctor _ _ n)



/--
Assume that we have a short exact sequence `0 ‚Üí A ‚Üí B ‚Üí C ‚Üí 0` in `Rep R G`
and that the sequence of `H`- invariants is also a short exact in `Rep R (G ‚ß∏ H)` :

  `0 ‚Üí A·¥¥ ‚Üí B·¥¥ ‚Üí C·¥¥ ‚Üí 0`.

Then we have a commuting square

`   H‚Åø(G ‚ß∏ H, C·¥¥)  ‚ü∂   H^{n+1}(G ‚ß∏ H, A·¥¥) `
`         |                 |             `
`         ‚Üì                 ‚Üì             `
`     H‚Åø(G , C)    ‚ü∂   H^{n+1}(G,A)       `

where the horizontal maps are connecting homomorphisms
and the vertical maps are inflation.
-/
lemma infl_Œ¥_naturality {S : ShortComplex (Rep R G)} (hS : S.ShortExact)
    (hS' : (S.map (quotientToInvariantsFunctor' surj)).ShortExact)  (i j : ‚Ñï) (hij : i + 1 = j) :
    Œ¥ hS' i j hij ‚â´ (infl surj j).app _ = (infl surj i).app _ ‚â´ Œ¥ hS i j hij
    := by
  let C := S.map (cochainsFunctor R G)
  let S' := S.map (quotientToInvariantsFunctor' surj)
  let C' := S'.map (cochainsFunctor R Q)
  let œÜ : C' ‚ü∂ C := {
    œÑ‚ÇÅ := (cochain_infl surj).app S.X‚ÇÅ
    œÑ‚ÇÇ := (cochain_infl surj).app S.X‚ÇÇ
    œÑ‚ÇÉ := (cochain_infl surj).app S.X‚ÇÉ
    comm‚ÇÅ‚ÇÇ := ((cochain_infl surj).naturality S.f).symm
    comm‚ÇÇ‚ÇÉ := ((cochain_infl surj).naturality S.g).symm
  }
  have ses‚ÇÅ : C.ShortExact := map_cochainsFunctor_shortExact hS
  have ses‚ÇÇ : C'.ShortExact := map_cochainsFunctor_shortExact hS'
  exact HomologySequence.Œ¥_naturality œÜ ses‚ÇÇ ses‚ÇÅ i j hij
